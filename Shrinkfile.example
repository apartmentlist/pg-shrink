filter_table :users do |f|

  # filter_by takes a block and yields the fields of each record (as a hash)
  # the block should return true to keep the record, false if not.  I think for
  # ease of use and extensibility, we probably allow multiple filter_by blocks
  # rather than forcing all logic into one block.
  f.filter_by do |u|
    u[:id] % 1000 == 0
  end

  # lock takes a block and yields the fields of each record (as a hash of
  # fieldname => value) If the block returns true this record is immune to all
  # further filtering.
  f.lock do |u|
    u[:email].split('@').last == 'apartmentlist.com'
  end

  # sanitize takes a block, yields the fields of each record as a hash of
  # fieldname => value and should return a new set of fields that has been
  # sanitized however desired.
  f.sanitize do |u|
    u[:email] = "somerandomemail#{u[:id]}@foo.bar"
    u
  end

  # filter_subtable indicates a child table to filter based upon the filtering
  # done on this table.
  f.filter_subtable(:favorites, :foreign_key => :user_id)

  # if needbe you can filter by a different key besides the id.  All filtering
  # will be done before all sanitization, so you don't need to worry about if
  # these are getting munged.
  f.filter_subtable(:email_preferences, :foreign_key => :user_email,
                                        :primary_key => :email)

  # You can also filter by a polymorphic reference by specifying the
  # type_key and type.
  f.filter_subtable(:polymorphic_referneces, :foreign_key => :context_id,
                                             :type_key => :context_type,
                                             :type => 'User')

  # If it feels more natural, you can define additional filters
  # or locks within a filter_subtable definitition
  f.filter_subtable(:lockable_table, :foreign_key => :user_id) do |sub|
    sub.lock do |u|
      u[:locked] == true
    end
  end

  # To keep things consistent, if you're sanitizing something that also exists
  # in other places (ie tables aren't fully normalized, and you have email in 2
  # places), you probably need to be able to specify this somehow
  f.propagate_sanitization(:email_preferences,
                           :local_field => :email,
                           :foreign_field => :user_email)

end

# If you have a chain of dependencies, ie users has favorites, favorites has
# some additional set of tables hanging off it, you define the 2nd relationship
# in its own filter_table block, and the tool will figure out that going from
# users => favorites also implies favorites => favorite_related_table
filter_table :favorites do |f|
  f.filter_subtable(:favorite_related_table, :foreign_key => :favorite_id)
end

# You can completely remove a table as well, or remove it minus a locked set of
# rows
remove_table :removables do |f|
  f.lock do |u|
    u[:name] == "Keep Me"
  end
end
